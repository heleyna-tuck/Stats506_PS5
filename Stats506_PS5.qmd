---
title: "Stats506_PS6"
author: "Heleyna Tucker"
format:
  html:
    embed-resources: true
editor: visual
---

GitHub Repo: https://github.com/heleyna-tuck/Stats506_PS5

# Problem 1 - Plotting

Using the "nnmaps" data set again. ggplot2 is recommending for these.

### Part A: Produce a graph of the mean monthly temp in Celsius

Produce a graph of the **mean** monthly temperature in **celsius**. Draw a scatter-plot where the x-axis is month and the y-axis is the average monthly temperature in celsius. Add a line connecting the points within each season and color the lines and points by season (same color for lines and points in the same season). Be sure both x-axis and the legend are ordered appropriately, and that all labels/titles are clear and ready for publication (e.g.Â no variable names).

Read in the data and visualize below:

```{r}
library(tidyverse)
nnmaps <- read_csv('/Users/19892/OneDrive/Documents/STATS506/ProblemSets/Stats506_PS5/chicago-nmmaps (1).csv')
head(nnmaps)
```

Convert Fahrenheit and add a column to the dataset with this conversion:

```{r}
# Function to convert Fahrenheit to Celsius
fahrenheit_to_celsius <- function(fahrenheit) {
  celsius <- (fahrenheit - 32) * (5/9)
  return(celsius)
}

nnmaps$tempC <- fahrenheit_to_celsius(nnmaps$temp)
head(nnmaps)
```

```{r}
library(dplyr)
# Calculate the average temperature for each month
avg_temp_per_month <- tapply(nnmaps$tempC, nnmaps$month_numeric, mean)


# Create a new data frame with average temperatures, months, and seasons
avg_temp_df <- data.frame(month_num = names(avg_temp_per_month), avg_temp = avg_temp_per_month)
avg_temp_df$month <- month.abb[as.numeric(avg_temp_df$month_num)]

avg_temp_df <- avg_temp_df %>%
  mutate(season = case_when(
  month %in% c("Jan", "Feb", "Mar") ~ "Winter",
  month %in% c("Apr", "May", "Jun") ~ "Spring",
  month %in% c("Jul", "Aug", "Sep") ~ "Summer",
  month %in% c("Oct", "Nov", "Dec") ~ "Autumn"))
avg_temp_df
```

```{r}
library(ggplot2)

# Order the "Month" factor
avg_temp_df$month <- factor(avg_temp_df$month, levels = c("Jan", "Feb", "Mar","Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))

avg_temp_df$season <- factor(avg_temp_df$season, levels = c("Winter", "Spring", "Summer", "Autumn"))

ggplot(avg_temp_df, aes(x = month, y = avg_temp, group = season, color = season)) +
  geom_point() +
  geom_line() +
  labs(title = "Monthly Temperature",
       x = "Month",
       y = "Temperature (Celsius)")
  
```

Above is a graph of the mean temperature in Celsisus of each month, colored by season, including lines also colored by season connecting the points by season. This behaves how we would expect, with the warmer seasons trending with hotter temperatures and vice versa.

### Part B - Similar plot with four sets of lines - mean monthly Temp (in C), PM10, o3, and dewpoint

Produce a similar plot with four sets of lines: mean monthly temperature in Celsius, mean montly O3, mean monthly PM10, and mean monthly dewpoint. Figure out a way to distinguish between the four lines. Again, make sure the plot is publication-ready (clean and clear labels). Use the plot to answer the following question:

"Which of the four variables seems to have the least seasonal trend?"

Create a df with averages needed. Then, create 4 separate dfs with each mean and month/season information:

```{r}
# Calculate the average temperature for each month
avg_temp_per_month <- tapply(nnmaps$tempC, nnmaps$month_numeric, mean)
avg_03_per_month <- tapply(nnmaps$o3, nnmaps$month_numeric, mean)
avg_PM10_per_month <- tapply(nnmaps$pm10, nnmaps$month_numeric, mean, na.rm = TRUE)
avg_dewpoint_per_month <- tapply(nnmaps$dewpoint, nnmaps$month_numeric, mean)

# Create a new data frame with average temperatures and seasons
avg_df <- data.frame(month_num = names(avg_temp_per_month), avg_temp = avg_temp_per_month, avg_o3 = avg_03_per_month, avg_pm10 = avg_PM10_per_month, avg_dew = avg_dewpoint_per_month)
avg_df$month <- month.abb[as.numeric(avg_df$month_num)]

avg_df <- avg_df %>%
  mutate(season = case_when(
  month %in% c("Jan", "Feb", "Mar") ~ "Winter",
  month %in% c("Apr", "May", "Jun") ~ "Spring",
  month %in% c("Jul", "Aug", "Sep") ~ "Summer",
  month %in% c("Oct", "Nov", "Dec") ~ "Autumn"))
avg_df

#Create serperate data frames for each variable (found out this works better for graphing below):
avg_df_o3 <- avg_df[, c(1, 3, 6, 7)]
avg_df_pm10 <- avg_df[, c(1,4,6,7)]
avg_df_dew <- avg_df[, c(1,5,6,7)]
avg_df_temp <- avg_df[, c(1, 2, 6, 7)]
```

Ordering of each data frame:

```{r}
# Order the "Month" factor
avg_df_temp$month <- factor(avg_temp_df$month, levels = c("Jan", "Feb", "Mar","Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))

avg_df_temp$season <- factor(avg_temp_df$season, levels = c("Winter", "Spring", "Summer", "Autumn"))

# Order the "Month" factor
avg_df_o3$month <- factor(avg_temp_df$month, levels = c("Jan", "Feb", "Mar","Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))

avg_df_o3$season <- factor(avg_temp_df$season, levels = c("Winter", "Spring", "Summer", "Autumn"))

# Order the "Month" factor
avg_df_pm10$month <- factor(avg_temp_df$month, levels = c("Jan", "Feb", "Mar","Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))

avg_df_pm10$season <- factor(avg_temp_df$season, levels = c("Winter", "Spring", "Summer", "Autumn"))

# Order the "Month" factor
avg_df_dew$month <- factor(avg_temp_df$month, levels = c("Jan", "Feb", "Mar","Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))

avg_df_dew$season <- factor(avg_temp_df$season, levels = c("Winter", "Spring", "Summer", "Autumn"))
```

Graph, similar to part (a):

```{r}
ggplot() +
  geom_point(avg_df_temp, mapping = aes(x = month, y = avg_temp, color = season)) +
  geom_line(avg_df_temp, mapping = aes(x = month, y = avg_temp, color = season, group = season, linetype = "Average Temperature (C)"))+
  geom_point(avg_df_o3, mapping = aes(x = month, y = avg_o3, group = season, color = season)) +
    geom_line(avg_df_o3, mapping = aes(x = month, y = avg_o3, color = season, group = season, linetype = "Average o3"))+
  geom_point(avg_df_pm10, mapping = aes(x = month, y = avg_pm10, group = season, color = season)) + 
      geom_line(avg_df_pm10, mapping = aes(x = month, y = avg_pm10, color = season, group = season, linetype = "Average PM10"))+
  geom_point(avg_df_dew, mapping = aes(x = month, y = avg_dew, group = season, color = season)) +
        geom_line(avg_df_dew, mapping = aes(x = month, y = avg_dew, color = season, group = season, linetype = "Average Dewpoint"))+
  labs(title = "Monthly Avgerages",
       x = "Month",
       y = "Average Values",
       color = "Season",
       linetype = "Data Frame")+
  scale_linetype_manual(values = c("Average Temperature (C)" = "solid", "Average o3" = "dashed", "Average PM10" = "dotted", "Average Dewpoint" = "dotdash"))
  
```

Above we can see a plot with 4 variables being displayed. Both keys show what each color and line type corresponds to. Using the graph above, we can tell that the Average PM10 variable has the least seasonal trend.

# Problem 2 - OOP Programming

Create a class to represent a polynomial expression (such as 7x\^2 - 3x +2) called poly. Do this using S4.

### Part A: For the poly class, define the following:

-   A constructor

-   A validator

-   A show method

-   Addition and subtraction

I will write the poly class below:

```{r}
# Define the poly class
setClass("poly",
         representation(degree = "numeric", coefficients = "numeric"),
         prototype(degree = 0, coefficients = numeric(0)))

# Constructor function for the poly class
poly <- function(degree, coefficients) {
  # Validate input
  if (!is.numeric(degree) || !is.numeric(coefficients)) {
    stop("Both degree and coefficients must be numeric.")
  }
  
  if (length(coefficients) != degree + 1) {
    stop("Length of coefficients must be degree + 1.")
  }
  
  # Create an instance of the poly class
  new("poly", degree = degree, coefficients = coefficients)
}

# Validator method for the poly class
setValidity("poly",
            function(object) {
              if (!is.numeric(object@degree) || !is.numeric(object@coefficients)) {
                return("Both degree and coefficients must be numeric.")
              }
              
              if (length(object@coefficients) != object@degree + 1) {
                return("Length of coefficients must be degree + 1.")
              }
              return(TRUE)
            })

# Show method for the poly class
setMethod("show",
          signature = "poly",
          function(object) {
            cat("Polynomial of degree", object@degree, "with coefficients:", object@coefficients, "\n")
          })

# Addition method for the poly class
setMethod("+",
          signature = c("poly", "poly"),
          function(e1, e2) {
            # Ensure both polynomials have the same degree
            if (e1@degree != e2@degree) {
              stop("Polynomials must have the same degree for addition. (add 0 coefficents when necessary)")
            }
            
            # Perform addition of coefficients
            result_coefficients <- e1@coefficients + e2@coefficients
            
            # Create a new polynomial with the result
            poly(degree = e1@degree, coefficients = result_coefficients)
          })

# Subtraction method for the poly class
setMethod("-",
          signature = c("poly", "poly"),
          function(e1, e2) {
            # Ensure both polynomials have the same degree
            if (e1@degree != e2@degree) {
              stop("Polynomials must have the same degree for subtraction.(add 0 coefficients when necessary)")
            }
            
            # Perform subtraction of coefficients
            result_coefficients <- e1@coefficients - e2@coefficients
            
            # Create a new polynomial with the result
            poly(degree = e1@degree, coefficients = result_coefficients)
          })


```

### Part B - Test Code

Use your poly class to run the following code:

*In my class above, the polynomials must be the same degree, so I will modify the code accordingly to work with addition and subtraction.*

```{r}

p1 <- poly(3, c(2, 0, 3, 0))
p2 <- poly(3, c(7, -2, -1, 17))
p1
p2
p1+p2
p1-p2
```

As we can see above, with the necessary changes from the PS example, the class outputs the expected output.

# Problem 3 - data.table

Repeat Problem 1 fro PS4 using data.table

Install and load the package [**nycflights13**](https://cran.r-project.org/package=nycflights13).

### Part A - Generating summary tables for the data

Generate a table (which can just be a nicely printed tibble) reporting the mean and median departure delay per airport. Generate a second table (which again can be a nicely printed tibble) reporting the mean and median arrival delay per airport. Exclude any destination with under 10 flights. Do this exclusion through code, not manually.

a.  Additionally,

    -   Order both tables in descending mean delay.

    -   Both tables should use the airport *names* not the airport *codes*.

    -   Both tables should print all rows.

    ```{r}
    library(nycflights13)
    head(airports)
    head(flights)
    head(planes)
    ```

```{r}
library(data.table)
flights_dt <- as.data.table(nycflights13::flights)
airports <- as.data.table(nycflights13::airports)
planes <- as.data.table(nycflights13::planes)

# Generate a table reporting mean and median departure delay per airport
departure_delay_table <- flights_dt[, .(Mean_Departure_Delay = mean(dep_delay, na.rm = TRUE),
                                        Median_Departure_Delay = median(dep_delay, na.rm = TRUE)),
                                    by = .(origin)][order(-Mean_Departure_Delay)]

#Rename Orignin to 'faa'
setnames(departure_delay_table, "origin", "faa")

#Left Join with 'airports':
departure_delay_table <- airports[departure_delay_table, on = "faa"]

#Get the columns we want:
departure_delay_table <- departure_delay_table[, .(name, Mean_Departure_Delay, Median_Departure_Delay)]
```

```{r}
# Generate a table reporting mean and median arrival delay per airport
arrival_delay_table <- flights_dt[, .(Mean_Arrival_Delay = mean(arr_delay, na.rm = TRUE), 
                                      Median_Arrival_Delay = median(arr_delay, na.rm = TRUE), 
                                  numflights = .N),
                                  by = .(dest)][numflights > 10]
```

```{r}
# Left Join:
arrival_delay_table <- arrival_delay_table[airports, on = .(dest = faa)][, ':='(name = fcoalesce(name, dest))]

#Select the columns we want and order from largest to smalles mean.
arrival_delay_table <- arrival_delay_table[, .(name, Mean_Arrival_Delay, Median_Arrival_Delay)][order(-Mean_Arrival_Delay)]
```

```{r}
departure_delay_table
arrival_delay_table
```

### Part B - How many flights did the aircraft model with the fastest average speed take?

How many flights did the aircraft model with the fastest average speed take? Produce a tibble with 1 row, and entries for the model, average speed (in MPH) and number of flights.

```{r}
# Calculate average speed (in MPH) for each aircraft model
flights_dt[, time := air_time / 60]  # Convert air_time to hours
flights_dt[, mph := distance / time]

#Merge flights and planes with the tailnum column:
merged <- merge(flights_dt, planes, by = "tailnum")
```

Find the model with the fastest average speed in mph:

```{r}
# Find the aircraft model with the fastest average speed
fastest_model <- merged[, .(avgmph = mean(mph, na.rm = TRUE), Number_of_Flights = .N), by = .(model)][order(-avgmph)][1]

fastest_model
```

Above, we can see that the model with the fastest average speed is model 777-222, with a speed of about 483 mph and 4 flights.
